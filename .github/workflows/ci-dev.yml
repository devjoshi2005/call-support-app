name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: ${{ secrets.ECR_REPO }}
  IMAGE_TAG: prod-${{ github.sha }}

jobs:
  scan_build_upload_to_ECR_n8n:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

      - name: SonarQube Quality Gate
        id: gate
        uses: SonarSource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      

    
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: docker build -t $ECR_REPO:$IMAGE_TAG .

      - name: Push to ECR 
        run: |
          docker tag $ECR_REPO:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update ECS service with new image
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER }}
          SERVICE_NAME: ${{ secrets.ECS_SERVICE }}
          CONTAINER_NAME: ${{ secrets.ECS_CONTAINER }}
        run: |
          TASK_DEF=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].taskDefinition" \
            --output text)

          aws ecs describe-task-definition \
            --task-definition $TASK_DEF \
            --query "taskDefinition" > task-def.json

          jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-def.json > task-def-stripped.json

          NEW_IMAGE="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG"
          jq --arg IMAGE "$NEW_IMAGE" \
             --arg NAME "$CONTAINER_NAME" \
             '(.containerDefinitions[] | select(.name == $NAME) | .image) = $IMAGE' \
             task-def-stripped.json > new-task-def.json

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "New task definition: $NEW_TASK_DEF_ARN"

          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEF_ARN \
            --force-new-deployment

          echo "ECS service updated and deployment triggered."
    

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: Pull ECR Image for caching
        run: |
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG

      - name: Trivy scan ECR image
        run: |
          trivy image --scanners vuln --severity HIGH,CRITICAL --format sarif \
            -o trivy.sarif \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG || true




      - name: Upload SARIF to GitHub Security tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      - name: Trivy scan ECR image (JSON for parsing)
        run: |
          trivy image \
            --scanners vuln \
            --severity HIGH,CRITICAL \
            --format json \
            -o trivy.json \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG || true

      - name: Evaluate results
        id: eval
        run: |
          status=$([ "${{ steps.gate.outputs.quality-gate-status }}" != "PASSED" ] && echo FAILED || echo OK)

          bugs=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=${{ secrets.SONAR_PROJECT_KEY }}&resolved=false" \
            | jq .total 2>/dev/null || echo 0)

          high=$(jq '[.Results[].Vulnerabilities[]?|select(.Severity=="HIGH")]|length' trivy.json 2>/dev/null || echo 0)
          critical=$(jq '[.Results[].Vulnerabilities[]?|select(.Severity=="CRITICAL")]|length' trivy.json 2>/dev/null || echo 0)

          echo "qualityGate=$status" >> $GITHUB_OUTPUT
          echo "bugs=${bugs:-0}" >> $GITHUB_OUTPUT
          echo "high=${high:-0}" >> $GITHUB_OUTPUT
          echo "critical=${critical:-0}" >> $GITHUB_OUTPUT
          echo "image=$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT

          [[ "$status" != "OK" || ${bugs:-0} -gt 0 || ${high:-0} -gt 0 || ${critical:-0} -gt 0 ]] \
            && echo "failed=true" >> $GITHUB_OUTPUT || echo "failed=false" >> $GITHUB_OUTPUT


      - name: Send Sonar → Graylog
        run: |
          curl -sS -X POST "http://54.160.169.95:12202/gelf" \
            -H "Content-Type: application/json" \
            -d "{
              \"short_message\": \"SonarQube results\",
              \"host\": \"github-actions\",
              \"_projectKey\": \"${{ secrets.SONAR_PROJECT_KEY }}\",
              \"_qualityGate\": \"${{ steps.eval.outputs.qualityGate }}\",
              \"_bugs\": ${{ steps.eval.outputs.bugs != '' && steps.eval.outputs.bugs || 0 }}
            }"

      - name: Send Trivy → Graylog
        run: |
          curl -sS -X POST "http://54.160.169.95:12203/gelf" \
            -H "Content-Type: application/json" \
            -d "{
              \"short_message\": \"Trivy scan results\",
              \"host\": \"github-actions\",
              \"_image\": \"${{ steps.eval.outputs.image }}\",
              \"_critical\": ${{ steps.eval.outputs.critical != '' && steps.eval.outputs.critical || 0 }},
              \"_high\": ${{ steps.eval.outputs.high != '' && steps.eval.outputs.high || 0 }}
            }"


      - name: Save SARIF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif
          path: trivy.sarif

      - name: Download Trivy SARIF
        uses: actions/download-artifact@v4
        with:
          name: trivy-sarif
          path: .

      - name: Fetch SonarQube issues
        run: |
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/issues/search?projectKeys=${{ secrets.SONAR_PROJECT_KEY }}&severities=CRITICAL,HIGH&resolved=false" \
            -o sonar_issues.json

      - name: Send to n8n
        run: |
          SAFE_SONAR=$(python3 -c 'import json,sys; print(json.dumps(open("sonar_issues.json").read()))')
          SAFE_TRIVY=$(python3 -c 'import json,sys; print(json.dumps(open("trivy.sarif").read()))')

          cat <<EOF > payload.json
          {
            "event": "DevSecOps Scan Complete",
            "repo": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "ecr_image": "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:$IMAGE_TAG",
            "sonarqube_issues": $SAFE_SONAR,
            "trivy_report": $SAFE_TRIVY
          }
          EOF

          curl -X POST https://automation-devj-account11.app.n8n.cloud/webhook/devsecops/raw  \
            --header 'Content-Type: application/json' \
            --data @payload.json
